
procedure main()

 te:=testInit()
 
 checkComplainAndAdjustExpected( te, 0)

 testFail( 0==1)

 checkComplainAndAdjustExpected( te, 0)

 testOk( te, 1~=2)

 testOk( te, 1=1)
 testOk( te, 1="1")
 testOk( te, "1"="1")

 testOk( te, 1~==2)

 testOk( te, 1==1)
 testOk( te, 1=="1")
 testOk( te, "1"=="1")

 testOk( te, 1===1)
 testFail( te, 1==="1")
 testOk( te, 1~==="1")
 testOk( te, "1"==="1")

 checkComplainAndAdjustExpected( te, 11)

 testOk( te, 3 = 4 - 1)
 testOk( te, 3 = 2 + 1)
 testFail( te, 3 = 2 + 0)
 testOk( te, 6 = 3 * 2)
 testOk( te, 3 = 6 / 2)
 testOk( te, 3 = 8 % 5)
 testOk( te, 9 = 3^2)

 checkComplainAndAdjustExpected( te, 6)
 
 testOk( te, "ab" == "a" || "b") # concatenation = will not work
 testOk( te, "abc" == "a" || "b" || "c") # concatenation = will not work

 testOk( te, 2 = *"ab") # length
 testOk( te, 3 = *"abc")

 testOk( te, "abc" == 'abc') # sorting
 testOk( te, "abc" == 'cba')
 testOk( te, "abc" == 'acb')

 checkComplainAndAdjustExpected( te, 7)

 # subscripting

 testOk( te, "a" == "abc"[1])
 testOk( te, "b" == "abc"[2])
 testOk( te, "c" == "abc"[-1])

 testOk( te, "b" == "abcde"[2:3])
 testOk( te, "bcd" == "abcde"[2:5])

 checkComplainAndAdjustExpected( te, 5)

 # subscripting

 s:="abc"
 s[2:3]:="z"
 testOk( te, "azc" == s)

 s:="ab"
 s[2:2]:="z"
 testOk( te, "azb" == s)

 checkComplainAndAdjustExpected( te, 2)

 testOk( te, 1 < 2)
 testOk( te, 1 < 2 < 3)

 testFail( te, 1 < 3 < 2)
 testFail( te, 2 < 3 < 1)

 testFail( te, 3 < 2 < 1)

 checkComplainAndAdjustExpected( te, 2)

 # null and non null tests

 testOk( te, /x ) # is not set?
 testFail( te, \x ) # is set?

 \x:=1  # if set, then set

 testOk( te, /x )
 testFail( te, \x )

 /x:=1 # if not set, then set

 testOk( te, x==1)
 testFail( te, /x ) # is not set?
 testOk( te, \x ) # is set?

 /x:=2 # if not set, then set

 testOk( te, x==1)
 testFail( te, /x )
 testOk( te, \x )

 checkComplainAndAdjustExpected( te, 6)

 # coevaluation

 every testOk( te, 1 to 3)

 checkComplainAndAdjustExpected( te, 3)

 # coevaluation

 every testOk( te, 1 to 3 & 1 to 4) # baustelle : more tests needed

 checkComplainAndAdjustExpected( te, 12)

 # alternation

 every testOk( te, 1 to 3 | 1 to 4) # baustelle : more tests needed

 checkComplainAndAdjustExpected( te, 13)

 a := b := c := 1

 testOk( te, 1=a)
 testOk( te, 1=b)
 testOk( te, 1=c)

 every a | b | c := 0

 testOk( te, 0=a)
 testOk( te, 0=b)
 testOk( te, 0=c)

 checkComplainAndAdjustExpected( te, 6)

 write( result( te))

end

